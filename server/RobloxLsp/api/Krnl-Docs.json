{
	"@krnl/global/Drawing": {
		"documentation": "Drawing is a library used for drawing 2D objects to the screen. Holds the constructor for Drawings.",
		"keys": {
			"new": "@krnl/global/Drawing.new",
			"Clear": "@krnl/global/Drawing.Clear",
			"Font": "@krnl/global/Drawing.Font"
		}
	},
	"@krnl/global/Drawing.new": "Returns a new Drawing object of the specified class.\n```lua\nlocal quad: Drawing.Quad = Drawing.new(\"Quad\")\n```",
	"@krnl/global/Drawing.Font": "An enum of the different font types available to `Drawing.Text`.",
	"@luau/global/debug": {
		"documentation": "<p>This library provides functions useful for debugging and profiling code.</p>",
		"keys": {
			"traceback": "@luau/global/debug.traceback",
			"info": "@luau/global/debug.info",
			"profilebegin": "@luau/global/debug.profilebegin",
			"profileend": "@luau/global/debug.profileend",
			"setmemorycategory": "@luau/global/debug.setmemorycategory",
			"resetmemorycategory": "@luau/global/debug.resetmemorycategory",
			"getupvalue": "@krnl/global/debug.getupvalue",
			"getupvalues": "@krnl/global/debug.getupvalues",
			"setupvalue": "@krnl/global/debug.setupvalue",
			"getconstant": "@krnl/global/debug.getconstant",
			"getconstants": "@krnl/global/debug.getconstants",
			"setconstant": "@krnl/global/debug.setconstant",
			"getproto": "@krnl/global/debug.getproto",
			"getprotos": "@krnl/global/debug.getprotos",
			"setstack": "@krnl/global/debug.setstack",
			"getstack": "@krnl/global/debug.getstack",
			"getinfo": "@krnl/global/debug.getinfo",
			"getregistry": "@krnl/global/debug.getregistry"
		},
		"learn_more_link": "https://developer.roblox.com/api-reference/lua-docs/debug"
	},
	"@krnl/global/debug.getupvalue": "Returns the value of the upvalue at the given index of the function or level `fn`.",
	"@krnl/global/debug.getupvalues": "Returns the list of upvalues in the function or level `fn`.",
	"@krnl/global/debug.setupvalue": "Assigns the value to the upvalue with the given index of the function `fn`. If an existing upvalue was changed, it returns the name of the upvalue.",
	"@krnl/global/debug.getconstant": "Returns the constant at the given index of the function or level `fn`.",
	"@krnl/global/debug.getconstants": "Returns the list of constants in the function or level `fn`.",
	"@krnl/global/debug.setconstant": "Assigns the value to the constant with the given index of the function `fn`.",
	"@krnl/global/debug.getproto": "Gets the inner function at the given index of the function or level `fn`. If `list` is true, returns a list of garbage collected instances of the function. Otherwise, return a function that is not equivalent to the original function.",
	"@krnl/global/debug.getprotos": "Returns a list of inner functions for the function or level `fn`. The functions returned will not have upvalues and are not equivalent to the original function.",
	"@krnl/global/debug.setstack": "Assigns the value to the stack item with the given index of the function `fn`.",
	"@krnl/global/debug.getstack": "Gets the runtime stack for the level `fn`. If `index` is provided, returns the stack item at the given index.",
	"@krnl/global/debug.getinfo": "Returns a table with information about the function or level `fn`. The second argument, `options`, is still in progress.",
	"@krnl/global/debug.getregistry": "Returns the Lua registry table. The registry is a predefined table that can be used by any C code to store whatever Lua values it needs to store.",
	"@krnl/global/Drawing.Clear": "Removes all active Drawing objects.",
	"@krnl/global/hookfunction": "Redirects attempts to call to `fn` with `hook` and returns the original function.",
	"@krnl/global/iskrnlclosure": "Returns whether the closure was created by Krnl",
	"@krnl/global/iscclosure": "Returns whether the closure is a CClosure",
	"@krnl/global/islclosure": "Returns whether the closure is a LuaClosure",
	"@krnl/global/newcclosure": "Transforms a LuaClosure into a CClosure with error handling",
	"@krnl/global/keypress": "Virtually presses a key.",
	"@krnl/global/keyrelease": "Virtually releases a key.",
	"@krnl/global/mouse1click": "Simulates a left-mouse button click.",
	"@krnl/global/mouse1down": "Virtually presses the left-mouse button.",
	"@krnl/global/mouse1up": "Virtually releases the left-mouse button.",
	"@krnl/global/mouse2click": "Simulates a right-mouse button click.",
	"@krnl/global/mouse2down": "Virtually presses the right-mouse button.",
	"@krnl/global/mouse2up": "Virtually releases the right-mouse button.",
	"@krnl/global/isrbxactive": "Returns whether the Roblox window is active.",
	"@krnl/global/mousemoverel": "Moves the cursor relative to it's current position.",
	"@krnl/global/mousemoveabs": "Moves the cursor to (X, Y).",
	"@krnl/global/mousescroll": "Simulates a scroll of `distance` pixels.",
	"@krnl/global/setscriptable": "Flags a property of `instance` as scriptable.",
	"@krnl/global/gethiddenproperty": "Gets a property of `instance` regardless of the IsScriptable flag.",
	"@krnl/global/sethiddenproperty": "Sets a property of `instance` to value regardless of the IsScriptable flag.",
	"@krnl/global/getproperties": "Returns all properties of `instance`, including hidden properties.",
	"@krnl/global/setsimulationradius": "Sets the LocalPlayer's SimulationRadius to `radius`.",
	"@krnl/global/getspecialinfo": "Gets special properties of certain instances.",
	"@krnl/global/fireclickdetector": "Sends a click signal for the ClickDetector.",
	"@krnl/global/firetouchinterest": "Fires the Touched/TouchEnded event of otherPart and part based on touchType.",
	"@krnl/global/fireproximityprompt": "Triggers the ProximityPrompt.",
	"@krnl/global/getconnections": "Returns a list of connections for the given signal.",
	"@krnl/global/getscriptclosure": "Creates a LuaClosure for the given script.",
	"@krnl/global/decompile": "Decompiles a script and returns a representation of the source.",
	"@krnl/global/getcallingscript": "Gets the script that called the current function.",
	"@krnl/global/getsenv": "Returns a script's global environment.",
	"@krnl/global/getloadedmodules": "Returns a list of all loaded ModuleScripts.",
	"@krnl/global/getscripts": "Returns a list of all existing scripts.",
	"@krnl/global/rconsolename": "Creates a Windows console using the name.",
	"@krnl/global/rconsoleprint": "Outputs data to the Windows console.",
	"@krnl/global/rconsoleinfo": "Outputs data to the console preceded with [INFO].",
	"@krnl/global/rconsolewarn": "Outputs data to the console preceded with [WARNING].",
	"@krnl/global/rconsoleerr": "Outputs data to the console preceded with [ERROR].",
	"@krnl/global/rconsoleclose": "Closes the Windows console if it is open.",
	"@krnl/global/rconsoleclear": "Clears the Windows console.",
	"@krnl/global/rconsoleinput": "Reads input from the Windows console.",
	"@krnl/global/messagebox": "Prompts a MessageBox with the given text, caption and flags, and returns the result.\n```lua\nMsgBoxResult: number\n   | 1: OK\n   | 2: CANCEL\n   | 3: ABORT\n   | 4: RETRY\n   | 5: IGNORE\n   | 6: YES\n   | 7: NO\n   | 10: TRYAGAIN\n   | 11: CONTINUE\n```",
	"@krnl/global/getnetworkmode": "Returns the current network mode.",
	"@krnl/global/setnetworkmode": "Sets the current network mode.",
	"@krnl/global/request": "Sends an HTTP request using a dictionary to specify the request data, such as the target URL, method, headers and request body data. It returns a dictionary that describes the response data received.\n```lua\ntype RequestOptions = {\n\tUrl: string,\n\tMethod: string?,\n\tHeaders: { [string]: string }?,\n\tBody: string?,\n}\n\ntype Response = {\n\tSuccess: boolean,\n\tStatusCode: number,\n\tStatusMessage: string?,\n\tHeaders: string?,\n\tBody: string?,\n}\n```",
	"@krnl/global/getrawmetatable": "Returns the metatable of the given object. Unlike `getmetatable`, it ignores the `__metatable` metamethod.",
	"@krnl/global/setrawmetatable": "Sets the metatable for the given object. Unlike `setmetatable`, it ignores the `__metatable` metamethod.",
	"@krnl/global/setreadonly": "Sets whether a table can be written to. Typically used to temporarily unlock metatables.",
	"@krnl/global/isreadonly": "Returns whether the table can be written to.",
	"@krnl/global/getnamecallmethod": "Returns the current namecall method.",
	"@krnl/global/setnamecallmethod": "Changes the current namecall method.",
	"@krnl/global/checkcaller": "Returns whether the calling thread was created by Krnl.",
	"@krnl/global/setfflag": "Sets the value of fflag to value.",
	"@krnl/global/getthreadcontext": "Returns the current thread identity.",
	"@krnl/global/setthreadcontext": "Sets the current thread identity.",
	"@krnl/global/queue_on_teleport": "Queues a script to be executed after teleporting.",
	"@krnl/global/gethui": "Returns a hidden CoreGui instance. Typically used to hide GUI objects from being accessed by the game.",
	"@krnl/global/getgenv": "Returns the current global environment.",
	"@krnl/global/getrenv": "Returns Roblox's global environment.",
	"@krnl/global/getreg": "Returns the Lua registry.",
	"@krnl/global/setclipboard": "Copies a string to the clipboard.",
	"@krnl/global/getgc": "Returns a list of garbage-collected functions and tables if included.",
	"@krnl/global/getcustomasset": "Generates a rbxasset:// [`content`](https://developer.roblox.com/en-us/articles/Content) URL for the given asset from Krnl's `workspace` directory.",
	"@krnl/global/setfpscap": "Sets the framerate limit. Passing 0 unlocks the framerate.",
	"@krnl/global/isfolder": "Returns whether a file at the given path exists and is a folder.",
	"@krnl/global/isfile": "Returns whether a file at the given path exists and is a file.",
	"@krnl/global/makefolder": "Makes a folder if the given path is empty. If `path` is a file, it will error.",
	"@krnl/global/delfile": "Deletes a file at the given path.",
	"@krnl/global/delfolder": "Deletes a folder at the given path.",
	"@krnl/global/listfiles": "Returns a list of file paths located in the directory.",
	"@krnl/global/readfile": "Returns the file's contents.",
	"@krnl/global/writefile": "Overwrites an existing file or creates a new file.",
	"@krnl/global/appendfile": "Appends data to a file's contents or creates a new file.",
	"@krnl/global/hookmetamethod": "Hooks the metatable method of the given object with `hook`. Returns a function to call the original metatable method.\nThrows an error if there is no metatable or method.",
	"@krnl/global/getinstances": "Returns a list of every Roblox instance.",
	"@krnl/global/getnilinstances": "Returns a list of every instance whose Parent is `nil`.",
	"@krnl/global/getcallbackvalue": "Returns the current value of an Instance's callback property.\n```lua\n-- Example\ngetcallbackvalue(remoteFunction, \"OnServerInvoke\")\n```",
	"@krnl/global/getcallbackmember": "Returns the current value of an Instance's callback property.\n```lua\n-- Example\ngetcallbackvalue(remoteFunction, \"OnServerInvoke\")\n```",
	"@krnl/global/getscriptbytecode": "Returns the bytecode of the given script.",
	"@krnl/global/getscripthash": "Returns the hash of the given script (bytecode SHA384)."
}
